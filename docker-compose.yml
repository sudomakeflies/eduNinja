services:
  db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_DB: evalsdb  # Nombre de la base de datos
      POSTGRES_USER: admin  # Usuario de la base de datos
      POSTGRES_PASSWORD: password  # Contrase√±a del usuario
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d

    networks:
      - app_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  web:
    build: .
    container_name: django_web
    #command: sh -c "python manage.py makemigrations && python manage.py migrate && ./start_app.sh --initial-data && ./start_app.sh --import-qti && python manage.py shell -c \"from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin')\" && python manage.py runserver 0.0.0.0:8000"
    #command: sh -c "python manage.py runserver 0.0.0.0:8000"
    command: sh -c "./start_app.sh"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_EMAIL=admin@eduninja.co
      - DJANGO_SUPERUSER_PASSWORD=admin
      - HOSTNAME=${HOSTNAME}
      - HOST_IP=${HOST_IP}
    volumes:
      - .:/app
      - media_data:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - app_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - app_network
    restart: always
    volumes:
      - media_data:/app/media

volumes:
  db_data:
  media_data:

networks:
  app_network:
    driver: bridge
